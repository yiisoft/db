on:
  pull_request:
    paths-ignore:
      - 'docs/**'
      - 'README.md'
      - 'CHANGELOG.md'
      - '.gitignore'
      - '.gitattributes'
      - 'infection.json.dist'
      - 'psalm.xml'

  push:
    paths-ignore:
      - 'docs/**'
      - 'README.md'
      - 'CHANGELOG.md'
      - '.gitignore'
      - '.gitattributes'
      - 'infection.json.dist'
      - 'psalm.xml'

name: active-record

jobs:
  tests:
    name: PHP ${{ matrix.php }}-active-record-${{ matrix.os }}

    env:
      COMPOSER_ROOT_VERSION: "dev-dev"
      extensions: pdo, pdo_mysql, pdo_oci, pdo_pgsql, pdo_sqlite, pdo_sqlsrv-5.10.0-beta1

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - ubuntu-latest

        php:
          - 8.0

    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_PASSWORD: ''
          MYSQL_DATABASE: yiitest
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      oci:
          image: wnameless/oracle-xe-11g-r2:latest
          ports:
              - 1521:1521
          options: --name=oci
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: root
          POSTGRES_DB: yiitest
        ports:
          - 5432:5432
        options: --name=postgres --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3
      mssql:
          image: mcr.microsoft.com/mssql/server:2019-latest
          env:
              SA_PASSWORD: YourStrong!Passw0rd
              ACCEPT_EULA: Y
              MSSQL_PID: Developer
          ports:
              - 1433:1433
          options: --name=mssql --health-cmd="/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'YourStrong!Passw0rd' -Q 'SELECT 1'" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Create MS SQL Database
        run: docker exec -i mssql /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'YourStrong!Passw0rd' -Q 'CREATE DATABASE yiitest'

      - name: Install PHP with extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.extensions }}
          ini-values: date.timezone='UTC'
          coverage: pcov
          tools: composer:v2, pecl

      - name: Determine composer cache directory
        run: echo "COMPOSER_CACHE_DIR=$(composer config cache-dir)" >> $GITHUB_ENV

      - name: Cache dependencies installed with composer
        uses: actions/cache@v2
        with:
          path: ${{ env.COMPOSER_CACHE_DIR }}
          key: php${{ matrix.php }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: |
            php${{ matrix.php }}-composer-
      - name: Update composer
        run: composer self-update

      - name: Install db-mssql
        run: composer require yiisoft/db-mssql:dev-dev --prefer-dist --no-interaction --no-progress --optimize-autoloader --ansi

      - name: Install db-mysql
        run: composer require yiisoft/db-mysql:dev-dev --prefer-dist --no-interaction --no-progress --optimize-autoloader --ansi

      - name: Install db-pgsql
        run: composer require yiisoft/db-pgsql:dev-dev --prefer-dist --no-interaction --no-progress --optimize-autoloader --ansi

      - name: Install db-oracle
        run: composer require yiisoft/db-oracle:dev-dev --prefer-dist --no-interaction --no-progress --optimize-autoloader --ansi

      - name: Install db-sqlite
        run: composer require yiisoft/db-sqlite:dev-dev --prefer-dist --no-interaction --no-progress --optimize-autoloader --ansi

      - name: Install active-record
        run: composer require yiisoft/active-record:dev-dev --prefer-dist --no-interaction --no-progress --optimize-autoloader --ansi

      - name: Run tests with phpunit with code coverage
        run: vendor/bin/phpunit --testsuite ActiveRecord --coverage-clover=coverage.xml --colors=always

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
